<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.0.xsd">

    <service verb="increment" noun="UserAccountFailedLogins">
        <in-parameters><parameter name="userId" type="String" required="true"/></in-parameters>
        <actions>
            <entity-find-one entity-name="UserAccount" value-field="userAccount"/>
            <set field="userAccount.successiveFailedLogins" from-field="userAccount.successiveFailedLogins + 1"/>
            <!-- if successiveFailedLogins is greater than max in conf then disable account -->
            <compare field="userAccount.successiveFailedLogins" operator="greater"
                     to-field="ec.ecfi.confXmlRoot.'user-facade'[0].login[0].'@max-failures' ?: 3" type="Integer">
                <set field="userAccount.disabled" value="Y"/>
                <set field="userAccount.disabledDateTime" from-field="ec.user.nowTimestamp"/>
            </compare>
            <entity-update value-field="userAccount"/>
        </actions>
    </service>

    <service verb="update" noun="UserAccountPassword">
        <description>Set a user's password. The userId must match the current user and the oldPassword must match the
            user's currentPassword or special permission is required.</description>
        <in-parameters>
            <parameter name="userId" required="false"><description>Defaults to the current userId in the ExecutionContext.</description></parameter>
            <parameter name="oldPassword" required="false"><description>Required unless current user has password admin permissions.</description></parameter>
            <parameter name="newPassword" required="true"/>
        </in-parameters>
        <actions>
            <set field="userId" from-field="userId ?: ec.user.userId"/>
            <!-- TODO get perm from ? -->
            <set field="hasPwAdminPermission" value="false"/>

            <entity-find-one entity-name="UserAccount" value-field="userAccount"/>

            <!-- compare the passwords, encrypted -->
            <if condition="!hasPwAdminPermission">
                <if condition="userId != this.userId">
                    <return message="Cannot update the password of another user without password admin permission" error="true"/>
                </if>
                <if condition="!oldPassword">
                    <return message="Please enter current password" error="true"/>
                </if>

                <call-script location="foo">
                    import org.moqui.impl.StupidUtilities
                    String oldPasswordFullHash = StupidUtilities.getHashDigest(oldPassword,
                            StupidUtilities.getHashSaltFromFull((String) userAccount.currentPassword),
                            StupidUtilities.getHashTypeFromFull((String) userAccount.currentPassword))
                    String oldPasswordHashOnly = StupidUtilities.getHashHashFromFull(oldPasswordFullHash)
                    String currentPasswordHashOnly = StupidUtilities.getHashHashFromFull(userAccount.currentPassword)
                </call-script>
                <if condition="oldPasswordHashOnly != currentPasswordHashOnly">
                    <return message="Current passwords did not match" error="true"/>
                </if>
            </if>

            <!-- check a bunch of stuff about the new password -->
            <set field="passwordNode" from-field="ec.ecfi.confXmlRoot.'user-facade'[0].'password'[0]"/>

            <set field="minLength" from-field="passwordNode.'@min-length'" default-value="6" type="Integer"/>
            <if condition="newPassword.length &lt; minLength">
                <message error="true">Password shorter than ${minLength} characters</message>
            </if>

            <set field="minDigits" from-field="passwordNode.'@min-digits'" default-value="1" type="Integer"/>
            <if condition="org.moqui.impl.StupidUtilities.countChars(newPassword,true,false,false) >= minDigits">
                <message error="true">Password needs ${minDigits} digits</message>
            </if>

            <set field="minOthers" from-field="passwordNode.'@min-others'" default-value="1" type="Integer"/>
            <if condition="org.moqui.impl.StupidUtilities.countChars(newPassword,false,false,true) >= minOthers">
                <message error="true">Password needs ${minOthers} others (not letter or digit)</message>
            </if>

            <!-- if password is in the history don't allow it -->
            <set field="historyLimit" from-field="passwordNode.'@history-limit'" default-value="5" type="Integer"/>
            <entity-find entity-name="UserPasswordHistory" list="duplicateUserPasswordHistoryList">
                <econdition field-name="userId" from-field="userId"/>
                <econdition field-name="password" from-field="newPassword"/>
            </entity-find>
            <if condition="duplicateUserPasswordHistoryList">
                <message error="true">Password used in last ${historyLimit} passwords</message>
            </if>

            <check-errors/>
            <!-- from here on the newPassword is considered okay -->

            <!-- save history, then while more in history than password.@history-limit default 5 then remove oldest -->
            <call-service service="create#UserPasswordHistory">
                <field-map field-name="userId"/>
                <field-map field-name="password" from-field="newPassword"/>
            </call-service>
            <entity-find entity-name="UserPasswordHistory" list="existingUserPasswordHistoryList">
                <econdition field-name="userId" from-field="userId"/>
                <order-by field-name="fromDate"/>
            </entity-find>
            <while condition="existingUserPasswordHistoryList.size() &gt; historyLimit">
                <entity-delete value-field="existingUserPasswordHistoryList.remove(0)"/>
            </while>

            <!-- encrypt password (using password.@encrypt-hash-type default SHA) and save -->
            <set field="hashType" from-field="passwordNode.'@encrypt-hash-type'" default-value="SHA"/>
            <set field="userAccount.currentPassword"
                 from-field="org.moqui.impl.StupidUtilities.getHashDigest(newPassword, null, hashType)"/>
            <entity-update value-field="userAccount"/>
        </actions>
    </service>
</services>
