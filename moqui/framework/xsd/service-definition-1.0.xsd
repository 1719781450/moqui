<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright 2010 David E. Jones

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
    <xs:include schemaLocation="common-types-1.0.xsd"/>
    <xs:include schemaLocation="xml-actions-1.0.xsd"/>

    <!-- root element -->
    <xs:element name="services">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="service"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="service">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" ref="description"/>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="implements"/>
                <xs:element minOccurs="0" ref="in-parameters"/>
                <xs:element minOccurs="0" ref="out-parameters"/>
                <xs:element minOccurs="0" ref="actions"/>
            </xs:sequence>
            <xs:attribute name="verb" type="xs:string" use="required">
                <xs:annotation><xs:documentation>
                        This can be any verb, and will often be one of: create, update, delete, or find.
                        The full name of the service will be: ${verb}${noun}
                        The very is required and the noun is optional so if there is no noun the service name will be just the verb.
                </xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="noun" type="xs:string" use="optional">
                <xs:annotation><xs:documentation>
                        For entity-auto services this should be a valid entity name.
                        In many other cases an entity name is the best way to describe what is being acted on, but this can really be anything.
                </xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="type" default="inline">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="inline"/>
                        <xs:enumeration value="entity-auto"/>
                        <xs:enumeration value="script"/>
                        <xs:enumeration value="java"/>
                        <xs:enumeration value="interface"/>
                        <xs:enumeration value="proxy-http"/>
                        <xs:enumeration value="proxy-jms"/>
                        <xs:enumeration value="proxy-rmi"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="location" type="xs:string" use="optional"/>
            <xs:attribute name="invoke" type="xs:string" use="optional"/>
            <xs:attribute name="authentication" default="true" type="boolean"/>
            <xs:attribute name="export" default="false" type="boolean"/>
            <xs:attribute name="validate" default="true" type="boolean"/>
            <xs:attribute name="transaction" default="use-or-begin">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="ignore"><xs:annotation><xs:documentation>Don't do anything with transactions (if one is in place use it, if no transaction in place don't begin one)</xs:documentation></xs:annotation></xs:enumeration>
                        <xs:enumeration value="use-or-begin"><xs:annotation><xs:documentation>Use active transaction or if no active transaction begin one</xs:documentation></xs:annotation></xs:enumeration>
                        <xs:enumeration value="force-new"><xs:annotation><xs:documentation>Always being a new transaction, pausing the active transaction if there is one</xs:documentation></xs:annotation></xs:enumeration>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="transaction-timeout" type="xs:int" default="0">
                <xs:annotation><xs:documentation>
                    Defines the timeout for the transaction, in seconds.
                    This value is only used if this service begins a transaction (either require-new, or
                    use-or-begin and there is no other transaction already in place).
                </xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="transaction-isolation" type="isolation-level" use="optional">
                <xs:annotation><xs:documentation>
                    The transaction isolation level to use if a transaction is begun when calling this service.
                </xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="max-retry" type="xs:int" default="-1"/>
            <xs:attribute name="debug" default="false" type="boolean"/>
            <xs:attribute name="semaphore" default="none">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="none"/>
                        <xs:enumeration value="fail"/>
                        <xs:enumeration value="wait"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="semaphore-wait-seconds" type="xs:int" default="300"/>
            <xs:attribute name="semaphore-sleep" type="xs:int" default="500"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="in-parameters">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="auto-parameters"/>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="parameter"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="out-parameters">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="auto-parameters"/>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="parameter"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="implements">
        <xs:complexType>
            <xs:attribute name="service" type="xs:string" use="required"/>
            <xs:attribute name="required" type="boolean" use="optional">
                <xs:annotation><xs:documentation>If set to true or false all parameters inherited have that required value.</xs:documentation></xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="auto-parameters">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="exclude"/>
            </xs:sequence>
            <xs:attribute name="entity-name" type="xs:string"/>
            <xs:attribute name="include" default="all">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="pk"/>
                        <xs:enumeration value="nonpk"/>
                        <xs:enumeration value="all"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attributeGroup ref="attlist.parameter-general"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="exclude">
        <xs:complexType>
            <xs:attribute name="field-name" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="ParameterValidations" abstract="true"/>
    <xs:element name="parameter">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" ref="description"/>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="subtype"/>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="ParameterValidations">
                    <xs:annotation><xs:documentation>To override the default message for each just add the message inside the element.</xs:documentation></xs:annotation>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="name" type="xs:string" use="required"/>
            <xs:attribute name="type" type="xs:string"/>
            <xs:attribute name="default-value" type="xs:string">
                <xs:annotation><xs:documentation>The value specified will be used for the parameter if no value is passed in (only used if required=false).</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="string-map-prefix" type="xs:string"/>
            <xs:attribute name="string-list-suffix" type="xs:string"/>
            <xs:attributeGroup ref="attlist.parameter-general"/>
        </xs:complexType>
    </xs:element>
    <xs:attributeGroup name="attlist.parameter-general">
        <xs:attribute name="required" default="false" type="boolean">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="true"/>
                    <xs:enumeration value="false"/>
                    <xs:enumeration value="disabled">
                        <xs:annotation><xs:documentation>Behave the same as if the parameter did not exist. Useful when overriding a previously defined parameter.</xs:documentation></xs:annotation>
                    </xs:enumeration>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="allow-html" default="none">
            <xs:annotation><xs:documentation>
                Applies only to String fields.
                Only checked for incoming parameters (meant for validating input from users, other systems, etc).
                Defaults to "none" meaning no HTML is allowed (will result in an error message).

                If some HTML is desired then use "safe" which will follow the rules in the antisamy-esapi.xml file.
                This should be safe for both internal and public users.

                In rare cases when users are trusted or it is not a sensitive field the "any" option may be used to not
                check the HTML content at all.
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="any"/>
                    <xs:enumeration value="safe"/>
                    <xs:enumeration value="none"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>

    <xs:element name="subtype">
        <xs:annotation><xs:documentation>
            Used to specify the valid type if the parameter.type or the parent subtype is a Map or any type of collection.

            If the parent type is a Map then the key should be a String and the value should be the type of the subtype
            where the key attribute matches the Map key, or for all other Map keys not specified the subtype with no
            key specified.
        </xs:documentation></xs:annotation>
        <xs:complexType>
            <xs:sequence><xs:element minOccurs="0" maxOccurs="unbounded" ref="subtype"/></xs:sequence>
            <xs:attribute name="key" type="xs:string"/>
            <xs:attribute name="type" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="val-or" substitutionGroup="ParameterValidations">
        <xs:complexType>
            <xs:sequence><xs:element minOccurs="0" maxOccurs="unbounded" ref="ParameterValidations"/></xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="val-and" substitutionGroup="ParameterValidations">
        <xs:complexType>
            <xs:sequence><xs:element minOccurs="0" maxOccurs="unbounded" ref="ParameterValidations"/></xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="val-not" substitutionGroup="ParameterValidations">
        <xs:complexType>
            <xs:sequence><xs:element minOccurs="0" maxOccurs="unbounded" ref="ParameterValidations"/></xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="matches" substitutionGroup="ParameterValidations" type="xs:string">
        <xs:annotation><xs:documentation>
            Validate the current parameter against the regular expression specified in the expr attribute of the tag.
        </xs:documentation></xs:annotation>
        <xs:complexType>
            <xs:attribute name="regexp" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="number-range" substitutionGroup="ParameterValidations" type="xs:string">
        <xs:complexType>
            <xs:attribute name="min" type="xs:nonNegativeInteger"/>
            <xs:attribute name="max" type="xs:nonNegativeInteger"/>
            <xs:attribute name="positive" type="boolean" default="false"/>
            <xs:attribute name="non-positive" type="boolean" default="false"/>
            <xs:attribute name="negative" type="boolean" default="false"/>
            <xs:attribute name="non-negative" type="boolean" default="false"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="number-integer" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="number-decimal" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="number-credit-card" substitutionGroup="ParameterValidations" type="xs:string"/>

    <xs:element name="text-length" substitutionGroup="ParameterValidations" type="xs:string">
        <xs:complexType>
            <xs:attribute name="min" type="xs:nonNegativeInteger"/>
            <xs:attribute name="max" type="xs:nonNegativeInteger"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="text-email" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="text-url" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="text-letters" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="text-digits" substitutionGroup="ParameterValidations" type="xs:string"/>

    <xs:element name="time-date" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="time-time" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="time-date-time" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="time-range" substitutionGroup="ParameterValidations" type="xs:string">
        <xs:complexType>
            <xs:attribute name="before" type="xs:string"><xs:annotation><xs:documentation>Can be date/time string, or "now" to compare to the current time.</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="after" type="xs:string"><xs:annotation><xs:documentation>Can be date/time string, or "now" to compare to the current time.</xs:documentation></xs:annotation></xs:attribute>
        </xs:complexType>
    </xs:element>

    <xs:element name="creditcard-any" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="creditcard-visa" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="creditcard-mastercard" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="creditcard-amex" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="creditcard-discover" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="creditcard-enroute" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="creditcard-jcb" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="creditcard-solo" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="creditcard-switch" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="creditcard-dinersclub" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="creditcard-visaelectron" substitutionGroup="ParameterValidations" type="xs:string"/>

    <xs:element name="usa-zip-code" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="usa-po-box" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="usa-phone" substitutionGroup="ParameterValidations" type="xs:string"/>
    <xs:element name="usa-area-code" substitutionGroup="ParameterValidations" type="xs:string"/>
</xs:schema>
