
=============================================================================
The Moqui Framework
=============================================================================

The Moqui Framework is an integrated tool set with everything needed to start
building web-based applications right away. Instead of starting with a set of
tools and figuring out how to use them together and filling in gaps that are
not handled by default Moqui is ready to go right away.

The Moqui Framework includes:

- Database (entity) proxy for data tier
  - Define your entities and go, no code to write and no redundancy
  - Java API or XML tags for a wide variety of queries and common operations
  - Event-Condition-Action rules to do things based on data changes
  - Data import and export tools, including for seed and other setup data
  - Support for Derby, HSQL, PostgreSQL, MySQL, and Oracle OOTB, and easy to
    add support for other databases, usually just through configuration
- Service-based logic tier
  - Call services synchronously, async, or scheduled
  - Services can be local or remote and implemented in a variety of languages
  - Flexible XML service definitions
  - Validation of data type, required or not, regexp, and other constraints;
    validation runs on server and in client with JavaScript library
  - Event-Condition-Action rules to orchestrate high level processes,
    externally change or augment behavior of existing services, and much more
- Screen-base user interface tier
  - Declarative multi-platform screens, text templates, or any combination
  - Generate HTML, XML, PDF (XSL-FO), or drive GWT or Swing screens
  - Screen files and included sets of subscreens in directories with the same
    structure as the application
  - Nested subscreens for multiple levels of tabs or other types of menus
  - Data preparation logic declared with screens to make each screen modular
  - Outgoing transitions point to input processing logic and conditional
    forwarding to other screens or external URLs
  - Forms (single, list), trees, panels, and various other common widgets
- Uses Groovy for scripting and Freemarker for templates (can add others)
- JCR 2.0 (JSR-283) based content and artifact management
- Manage incoming and outgoing email
- Implicit internationalization and easy localization
- Comprehensive security with declarative authorization
  - Settings in the database, separate from implementation artifacts
  - Define run-time inheritable permissions for any artifact in the system
  - Both record level and implementation artifact level security
- Protection from XSS and XSRF threats (uses ESAPI and Antisamy)
- Flexible resource access from files, JCR repository, and many others
- Cache management for framework and application resources
- Logging
- Multi-tenant architecture (single application, one database per tenant)
- Common business data structures and seed data
  - Enumerations and statuses with transitions
  - Units of measure with conversion, including currency
  - Geographic boundaries (legal and arbitrary) and points
  - Time periods and temporal expressions
- Service/logic and data level integration options
- Data migration and mapping tools (especially for to/from XML, to/from db)

The framework features a well-defined Java API that makes it easy to get at
the features listed above, especially in Groovy code. What's even better is
that the Moqui tools are designed to be used in a declarative way so most of
what you need to do will be possible with XML configuration and little or no
code is required, unless you want to of course.


=============================================================================
The Moqui Framework versus the the Apache OFBiz Framework
=============================================================================


