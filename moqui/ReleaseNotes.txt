
Moqui Framework Release Notes

===========================================================================
Release 1.0-preview2 - (date not yet planned)
===========================================================================

TODO: add/maintain notes here

This release includes:

- All of the great features of 1.0-preview1
- Significant updates to Example application screens (most now working)
- Added various configuration options and examples for flexible deployment
  and overriding templates for screen macros, xml-actions, etc
- Executable WAR file is more self-contained, ie less required in runtime
  but with a few more override options in runtime too
- Root web screen split to support undecorated subscreens and apps

- XML Screens
  - Standalone screens that are rendered independently of parent screens
    and can still be subscreens of any other screen
  - Screen pre-actions that all run before any parent screen is rendered
    to allow for setting parameters in parent screens, setting up general
    things, etc
  - Screen form elements, all implemented (including file upload, *-find)
  - Screen form header-field widget rendering
  - Screen form header-field.@show-order-by support
  - Screen form output formatting, based on service parameter format if
    applicable, otherwise on format specified in form field
  - Output encoding, configurable on various screen/form elements
  - I18n (with L10nFacade) for labels and titles in screens, forms, menus
- Service Facade
  - Service expand auto-parameters, get parameters from implements
  - Finished implementation of async/scheduled service calls
  - Service run on commit and on rollback of current tx (ServiceCallSpecial)
  - Service parameter type/subtype checking
  - Service parameter ESAPI/Antisamy HTML checks (any/safe/none)
  - Service authentication
  - Service parameter conversion/parsing and validation checks
  - Service ECA rules
- Entity Facade
  - View-entity fixes and testing, now most view-entity options work
  - Support entity-find.search-form-inputs element for form *-find fields
  - Automatic cache clearing for one, list (using RA cache), count caches
  - Entity extension
  - Entity audit-logging
  - Entity field encryption
  - Entity ECA rules
  - Support offset and limit as LIMIT/OFFSET or OFFSET/FETCH depending on
    configuration on the database element in the Moqui conf file
  - Database meta-data support for adding indexes when tables added
  - Automatically add columns if missing in table check
  - Add foreign keys to existing tables when table created, and in table
    check add foreign keys that don't yet exist to existing tables

Notable features not yet implemented:

- Clean up JavaDoc/GroovyDoc comments and post to site
- XML Screens
  - Screen form AJAX and jQuery
  - Screen form field-layout support
  - Screen form client JS validation based on target transition service
    definition (define once, run on client and server)
  - Screen form-list pagination
  - Screen tree elements
  - Screen section-iterate pagination
  - Renderers for non-HTML output (XML, XSL-FO, CSV, etc, etc)
- Service Facade
  - Service runners for remote service calls (HTTP, JMS, RMI proxies)
  - Service runners for web service standards (XML-RPC, REST, JSON, etc)
  - Service mail handling (MCA rules)
  - Service async/scheduled max-retry in Quartz
- Entity Facade
  - Entity complex aliases in views
  - Database meta-data check/report against entity definitions
- ArtifactExecutionFacade for artifact stack tracking
- Artifact Authorization, Tar-pitting based on configuration in db
- ServerHit and ServerHitBin tracking
- Visitor tracking
- Multi-tenant support (shared app server, separate databases)
- Web Tools UI for Cache, Scheduler, Entity Data UI, SQL/Script Run, etc

===========================================================================
Release 1.0-preview1 - 09 Feb 2011
===========================================================================

Release 1.0-preview1 is the first preview release of the Moqui Framework.

This first release includes a number of complete tools, implementation of
most of the Java API, and support for many of the configuration elements
and the various XML files. There are many things left to do before all 1.0
features are implemented and you'll see various "TODO" comments scattered
around, though not every feature yet to be implemented is represented by
such a comment.

This release includes:

- Flexible deployment
  - Executable WAR file for command-line data loading and embedded Winstone
    servlet container (Derby DB, Atomikos JTA&CP, other required JARs)
  - The same WAR file can be dropped in a servlet container like Tomcat or
    Jetty, or a more general app server like JBoss or Weblogic
  - Supports Derby, HSQL, MySQL, Oracle and Postgres OOTB, support for
    additional databases primarily by configuration
  - Separate runtime directory with configuration, components, logs,
    database, JCR repo, etc; is the same no matter how the WAR is deployed
  - Use the supplied MoquiServlet, or write your own based on that example
  - Everything runs from an instance of the ExecutionContextFactory, so it
    is easy to include in custom programs or deploy through OSGi, etc
  - Specify runtime directory path and conf file location using properties
    file or System properties (java -D arguments)
- XML Screens
  - XML Screen rendering for HTML
  - Screen menus and sub-screens
    - Hierarchical to any depth, URL is path to screen in hierarchy
    - URL building based on configuration
    - Sub-screens by directory structure, XML elements, db record
  - Screen sub-content (stand-alone, included in screen) including support
    for FTL and Confluence Wiki templates, and text and binary files
  - Screens and sub-content can be located in files or in a JCR repository
  - Can include or inline HTML and other text content
  - Visit tracking
- Execution Context & General Facades
  - WebFacade for access to Servlet objects, parameter maps, etc
  - UserFacade for current user data, login/logout/authentication, etc
  - MessageFacade for general and error message management
  - L10nFacade for localization of text
  - Resource Facade for access to classpath, file, JCR, etc resources,
    and for running scripts and rendering templates (with caching for all);
    - Interface to implement for any type of template rendering desired
    - Interface to implement for any type of resource reference and access
  - LoggerFacade for general logging, especially for non-class code
  - CacheFacade for general caching, backed by ehcache
  - TransactionFacade for general JTA-type operations and tracking what is
    currently going on with transactions, where errors originated, etc
  - ScreenFacade for rendering screens using the ScreenRender interface
- Service Facade
  - Service runners for Java, XML Actions, inline actions, Scripts
  - Entity-auto runner for CrUD ops without even defining the service
  - Interface for adding your own service runners
  - Can call sync, async or scheduled (using Quartz Scheduler)
- Entity Facade
  - EntityValue with support for create, update, delete, refresh db
    operations, find related, various get and set options
  - EntityFind with various conditions, etc supported and results of one,
    list, iterator, count, updateAll, or deleteAll.
  - Comprehensive data loader with API and command-line access
  - Database meta-data support for automatically creating tables at
    runtime as they are used
  - Primary and secondary sequenced ID generation
- Security
  - ESAPI input canonicalization/filtering
  - User account and flexible password constraints and management
  - Authentication in XML Screens
  - Can require encryption in XML Screens
  - XSRF protection by requiring encryption of input in body parameters
- XML Actions
  - Converts to Groovy code then compiles for good runtime performance
  - Embeddable in service definitions, screens, etc
- Example application with screens, sub-content (CSS, html.ftl, cwiki.ftl),
  entities and services, demo app and security and l10n data, etc
- Sample configurations for development, staging, and production
- Configurable "root" screen with sample HTML wrappers, login, menus, etc

Notable features not yet implemented:

- XML Screens
  - Renderers for non-HTML output (XML, XSL-FO, CSV, etc, etc)
  - Screen tree nodes
  - Screen form elements (for now comments show in rendered output)
  - Dynamic Screens (database-driven: DynamicScreen*)
  - Dynamic Forms (database-driven: DynForm*)
  - ESAPI output encoding
- Entity Facade
  - Entity ECA rules
  - Entity encryption, audit-logging, complex aliases in views
  - Automatic cache clearing
  - Entity extension
  - Database meta-data support for adding columns, fks, indexes
  - EntitySync tool
  - Database-driven dynamic view entity
- Service Facade
  - Service ECA rules
  - Service validation, authentication, semaphores
  - Service runners for remote service calls (HTTP, JMS, RMI proxies)
  - Service runners for web service standards (XML-RPC, REST, JSON, etc)
  - Expand auto-parameters
  - Service run on commit and on rollback of current tx (ServiceCallSpecial)
  - Service async or scheduled max-retry
- ArtifactExecutionFacade for artifact stack tracking
- Artifact Authorization, Tar-pitting based on configuration in db
- ServerHit and ServerHitBin tracking
- Visitor tracking
- Multi-tenant support (shared app server, separate databases)
- Web Tools UI for Cache, Scheduler, Entity Data UI, SQL/Script Run, etc
- I18n (calls to L10nFacade, in String expand, pre-expand) in XML Screens

===========================================================================
Features designed, but not to be included in 1.0 series
===========================================================================

- XML Screens
  - Dynamic Screens (database-driven: DynamicScreen*)
  - Dynamic Forms (database-driven: DynForm*)
- Service Facade
  - Service database-driven semaphores
- Entity Facade
  - EntitySync tool
  - Database-driven dynamic view entity
