<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.5.xsd">

    <service verb="get" noun="ServerPrinters">
        <description>Get printers from print server and create a moqui.basic.print.NetworkPrinter record for each.</description>
        <in-parameters>
            <parameter name="serverHost" required="true"/>
            <parameter name="serverPort" type="Integer" default="631"/>
        </in-parameters>
        <out-parameters><parameter name="networkPrinterIdList" type="List"/></out-parameters>
        <actions>
            <set field="networkPrinterIdList" from="[]"/>

            <!-- lookup existing printers for this server, don't create them again but include them in the result -->
            <set field="printerNameSet" from="new HashSet()"/>
            <entity-find entity-name="moqui.basic.print.NetworkPrinter" list="networkPrinterList">
                <econdition field-name="serverHost"/><econdition field-name="serverPort"/></entity-find>
            <iterate list="networkPrinterList" entry="networkPrinter">
                <script>networkPrinterIdList.add(networkPrinter.networkPrinterId)</script>
                <script>printerNameSet.add(networkPrinter.printerName)</script>
            </iterate>

            <set field="cupsClient" from="new org.cups4j.CupsClient(serverHost, serverPort)"/>
            <set field="printerList" from="cupsClient.getPrinters()"/>
            <iterate list="printerList" entry="cupsPrinter">
                <if condition="!printerNameSet.contains(cupsPrinter.getName())">
                    <service-call name="create#moqui.basic.print.NetworkPrinter" out-map="npOut"
                            in-map="[serverHost:serverHost, serverPort:serverPort, printerName:cupsPrinter.getName(),
                            description:cupsPrinter.getDescription(), location:cupsPrinter.getLocation()]"/>
                    <script>networkPrinterIdList.add(npOut.networkPrinterId)</script>
                </if>
            </iterate>
        </actions>
    </service>
    <service verb="print" noun="Document">
        <description>Create a moqui.basic.print.PrintJob record and send it to the specified NetworkPrinter</description>
        <in-parameters>
            <parameter name="networkPrinterId" required="true"/>
            <parameter name="username"/>
            <parameter name="jobName"/>
            <parameter name="copies" type="Integer" default="1"/>
            <parameter name="duplex" type="Boolean" default="false"/>
            <parameter name="pageRanges"/>
            <parameter name="storeDocument" type="Boolean" default="true"/>

            <parameter name="inputStream" type="java.io.InputStream"><description>The document may be passed in this
                parameter as an InputStream or in the serialBlob field as a wrapped byte[].</description></parameter>
            <parameter name="serialBlob" type="javax.sql.rowset.serial.SerialBlob">
                <description>Use SerialBlob as a wrapper for byte[].</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="printJobId"/>
            <parameter name="jobId" type="Integer"/>
        </out-parameters>
        <actions>
            <if condition="serialBlob == null &amp;&amp; inputStream == null">
                <return error="true" message="Both inputStream and serialBlob are null, must specify one or the other"/></if>
            <if condition="storeDocument">
                <!-- for storing the document we'll always use a byte[] (not SerialBlob, so can be used below too) -->
                <if condition="serialBlob != null">
                    <set field="document" from="serialBlob.getBytes(1, (int) serialBlob.length())"/>
                    <else><set field="document" from="org.apache.commons.io.IOUtils.toByteArray(inputStream)"/></else>
                </if>
            </if>
            <set field="statusId" value="PtjNotSent"/>
            <service-call name="create#moqui.basic.print.PrintJob" in-map="context" out-map="context"/>
            <if condition="!storeDocument">
                <!-- for sending the printJob we want a byte[] or InputStream -->
                <set field="document" from="serialBlob != null ? serialBlob.getBytes(1, (int) serialBlob.length()) : inputStream"/>
            </if>
            <service-call name="org.moqui.impl.PrintServices.send#PrintJobInternal"
                    in-map="[printJob:context]" out-map="context"/>
        </actions>
    </service>
    <service verb="send" noun="PrintJob">
        <in-parameters><parameter name="printJobId" required="true"/></in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.basic.print.PrintJob" value-field="printJob"/>
            <service-call name="org.moqui.impl.PrintServices.send#PrintJobInternal"
                    in-map="[printJob:printJob]" out-map="context"/>
        </actions>
    </service>
    <service verb="send" noun="PrintJobInternal">
        <in-parameters><parameter name="printJob" type="Map" required="true"/></in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.basic.print.PrintJob" value-field="printJob"/>
            <service-call name="org.moqui.impl.PrintServices.make#CupsPrinter"
                    in-map="[networkPrinterId:printJob.networkPrinterId]" out-map="context"/>

            <script>
                import org.cups4j.CupsPrinter
                import org.cups4j.PrintJob

                CupsPrinter cupsPrinter = context.cupsPrinter
                PrintJob.Builder pjb = new PrintJob.Builder(printJob.document)
                if (printJob.username) pjb.userName(printJob.username)
                if (printJob.jobName) pjb.jobName(printJob.jobName)
                if (printJob.copies) pjb.copies(printJob.copies)
                if (printJob.duplex != null) pjb.duplex(printJob.duplex)
                if (printJob.pageRanges) pjb.pageRanges(printJob.pageRanges)
                PrintJob pj = pjb.build()
                cupsPrinter.print(pj)
            </script>
            <service-call name="update#moqui.basic.print.PrintJob"
                    in-map="[printJobId:printJob.printJobId, statusId:'PtjPending']"/>
        </actions>
    </service>
    <service verb="get" noun="PrintJobDetailsFromServer">
        <description>Gets known local job details (from PrintJob record) job details/attributes from the print server,
            updating PrintJob record for status and just returning the rest.</description>
        <in-parameters><parameter name="printJobId"/></in-parameters>
        <out-parameters>
            <auto-parameters entity-name="moqui.basic.print.PrintJob" include="nonpk">
                <exclude field-name="document"/></auto-parameters>

            <parameter name="completeTime" type="Timestamp"/>
            <parameter name="createTime" type="Timestamp"/>
            <parameter name="jobUrl"/>
            <parameter name="pagesPrinted" type="Integer"/>
            <parameter name="printerUrl"/>
            <parameter name="size" type="Integer"/>
        </out-parameters>
        <actions>
            <service-call name="org.moqui.impl.PrintServices.make#CupsClient"
                    in-map="[printJobId:printJobId]" out-map="context"/>
            <script>
                import org.cups4j.CupsClient
                import org.cups4j.JobStateEnum
                import org.cups4j.PrintJobAttributes

                Map stateMap = ['aborted':'PtjAborted', 'canceled':'PtjCanceled', 'completed':'PtjCompleted',
                                'pending':'PtjPending', 'pending-held':'PtjPendingHeld',
                                'processing':'PtjProcessing', 'processing-stopped':'PtjProcessingStopped']

                context.putAll(printJob)

                CupsClient cupsClient = context.cupsClient
                PrintJobAttributes pja = cupsClient.getJobAttributes(printJob.jobId)

                statusId = stateMap.get(pja.getJobState().toString())
                if (pja.getJobCompleteTime()) completeTime = new Timestamp(pja.getJobCompleteTime().getTime())
                if (pja.getJobCreateTime()) createTime = new Timestamp(pja.getJobCreateTime().getTime())
                jobUrl = pja.getJobURL()
                pagesPrinted = pja.getPagesPrinted()
                printerUrl = pja.getPrinterURL()
                size = pja.getSize()
            </script>
            <if condition="statusId != printJob.statusId">
                <service-call name="update#moqui.basic.print.PrintJob"
                        in-map="[printJobId:printJob.printJobId, statusId:statusId]"/>
            </if>
        </actions>
    </service>
    <service verb="hold" noun="PrintJob">
        <in-parameters><parameter name="printJobId"/></in-parameters>
        <actions>
            <service-call name="org.moqui.impl.PrintServices.make#CupsClient"
                    in-map="[printJobId:printJobId]" out-map="context"/>
            <if condition="!cupsClient.holdJob(printJob.jobId)">
                <message>Could not hold job [${printJob.jobId}] on print server at [${networkPrinter.serverHost}] for PrintJob [${printJobId}]</message></if>
        </actions>
    </service>
    <service verb="release" noun="PrintJob">
        <in-parameters><parameter name="printJobId"/></in-parameters>
        <actions>
            <service-call name="org.moqui.impl.PrintServices.make#CupsClient"
                    in-map="[printJobId:printJobId]" out-map="context"/>
            <if condition="!cupsClient.releaseJob(printJob.jobId)">
                <message>Could not release job [${printJob.jobId}] on print server at [${networkPrinter.serverHost}] for PrintJob [${printJobId}]</message></if>
        </actions>
    </service>
    <service verb="cancel" noun="PrintJob">
        <in-parameters><parameter name="printJobId"/></in-parameters>
        <actions>
            <service-call name="org.moqui.impl.PrintServices.make#CupsClient"
                    in-map="[printJobId:printJobId]" out-map="context"/>
            <if condition="!cupsClient.cancelJob(printJob.jobId)">
                <message>Could not cancel job [${printJob.jobId}] on print server at [${networkPrinter.serverHost}] for PrintJob [${printJobId}]</message></if>
        </actions>
    </service>

    <service verb="make" noun="CupsPrinter">
        <in-parameters><parameter name="networkPrinterId"/></in-parameters>
        <out-parameters>
            <parameter name="cupsClient" type="org.cups4j.CupsClient"/>
            <parameter name="cupsPrinter" type="org.cups4j.CupsPrinter"/>
            <parameter name="networkPrinter" type="EntityValue"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="moqui.basic.print.NetworkPrinter" value-field="networkPrinter"/>
            <script><![CDATA[
                import org.cups4j.CupsPrinter
                import org.cups4j.CupsClient

                String printerName = networkPrinter.printerName
                cupsClient = new CupsClient(networkPrinter.serverHost, networkPrinter.serverPort ?: 631)
                if (printerName) {
                    printerList = cupsClient.getPrinters()
                    for (CupsPrinter curPrinter in printerList) {
                        if (curPrinter.getName() == printerName) {
                            cupsPrinter = curPrinter
                            break
                        }
                    }
                } else {
                    cupsPrinter = cupsClient.getDefaultPrinter()
                }
                ]]></script>
            <if condition="cupsPrinter == null">
                <return error="true" message="Print not found with name [${printerName}] on server [${networkPrinter.serverHost}] for NetworkPrinter [${networkPrinterId}]"/></if>
        </actions>
    </service>
    <service verb="make" noun="CupsClient">
        <in-parameters><parameter name="printJobId"/></in-parameters>
        <out-parameters>
            <parameter name="cupsClient" type="org.cups4j.CupsClient"/>
            <parameter name="printJob" type="EntityValue"/>
            <parameter name="networkPrinter" type="EntityValue"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="moqui.basic.print.PrintJob" value-field="printJob"/>
            <set field="networkPrinterId" from="printJob.networkPrinterId"/>
            <entity-find-one entity-name="moqui.basic.print.NetworkPrinter" value-field="networkPrinter"/>
            <set field="cupsClient" from="new org.cups4j.CupsClient(networkPrinter.serverHost, networkPrinter.serverPort ?: 631)"/>
        </actions>
    </service>
</services>
