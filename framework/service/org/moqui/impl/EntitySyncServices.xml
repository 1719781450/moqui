<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.5.xsd">


    <service verb="run" noun="EntitySyncAll" transaction="ignore">
        <actions>
            <entity-find entity-name="moqui.entity.sync.EntitySync" list="entitySyncList"/>
            <iterate list="entitySyncList" entry="entitySync">
                <service-call name="org.moqui.impl.EntitySyncServices.run#EntitySync"
                        in-map="[entitySyncId:entitySync.entitySyncId]"/>
            </iterate>
        </actions>
    </service>
    <service verb="run" noun="EntitySync" transaction="force-new">
        <in-parameters>
            <parameter name="entitySyncId" required="true"/>
        </in-parameters>
        <actions>
            <!-- TODO -->
        </actions>
    </service>

    <service verb="set" noun="EntitySyncData" transaction="ignore">
        <in-parameters>
            <parameter name="entityData" required="true"/>
            <parameter name="timeout" type="Integer" default="600"/>
            <parameter name="dummyFks" type="Boolean" default="true"/>
            <parameter name="useTryInsert" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="recordsStored" type="Long"/>
        </out-parameters>
        <actions>
            <script><![CDATA[
                org.moqui.entity.EntityDataLoader edl = ec.entity.makeDataLoader()
                edl.xmlText(entityData)
                edl.transactionTimeout(timeout)
                edl.dummyFks(dummyFks)
                edl.useTryInsert(useTryInsert)
                long recordsStored = edl.load()
            ]]></script>
        </actions>
    </service>
    <service verb="get" noun="EntitySyncData">
        <in-parameters>
            <parameter name="entityIncludeList" type="List">
                <parameter name="entryMap" type="Map">
                    <parameter name="entityName"/>
                    <parameter name="includeFilterList" type="List"/><!-- List of Maps to be ORed together -->
                    <parameter name="dependents" type="Boolean"/>
                </parameter>
            </parameter>
            <parameter name="lastSuccessfulSyncTime" type="Timestamp" required="true"/>
            <parameter name="syncSplitMillis" type="Long" default="1000"/>
            <parameter name="recordThreshold" type="Long" default="1000"/>
            <parameter name="delayBufferMillis" type="Long" default="300000"/><!-- default to 5 minutes -->
        </in-parameters>
        <out-parameters>
            <parameter name="entityData"/>
            <parameter name="exclusiveFromTime" type="Timestamp"/>
            <parameter name="inclusiveThruTime" type="Timestamp"/>
        </out-parameters>
        <actions>
            <script><![CDATA[
                import org.moqui.context.ExecutionContext
                import org.moqui.entity.EntityCondition
                import org.moqui.entity.EntityFind
                import org.moqui.entity.EntityList

                long lastSyncLong = lastSuccessfulSyncTime.getTime()
                long splitFromLong = lastSyncLong
                long splitThruLong = splitFromLong + syncSplitMillis
                long maxSyncLong = System.currentTimeMillis() - delayBufferMillis

                Writer entityWriter = new StringWriter()
                entityWriter.append("<entity-facade-xml>")

                ExecutionContext ec = context.ec

                long recordCount = 0
                while (recordCount < recordThreshold && splitThruLong < maxSyncLong) {
                    for (Map entryMap in entityIncludeList) {
                        EntityFind find = ec.entity.makeFind((String) entryMap.entityName)
                        find.condition("lastUpdatedStamp", EntityCondition.GREATER_THAN, new Timestamp(splitFromLong))
                        find.condition("lastUpdatedStamp", EntityCondition.LESS_THAN_EQUAL_TO, new Timestamp(splitThruLong))

                        List includeCondList = []
                        for (Map filterMap in includeFilterList)
                            includeCondList.add(ec.entity.conditionFactory.makeCondition(filterMap))
                        if (includeCondList)
                            find.condition(ec.entity.conditionFactory.makeCondition(includeCondList, EntityCondition.OR))

                        EntityList resultList = find.list()
                        recordCount += resultList.size()
                        resultList.writeXmlText((Writer) entityWriter, null, (Boolean) entryMap.dependents)
                    }

                    // increment the split times
                    splitFromLong = splitThruLong
                    splitThruLong = splitFromLong + syncSplitMillis
                }

                entityWriter.append("</entity-facade-xml>")
                entityData = entityWriter.toString()

                exclusiveFromTime = lastSuccessfulSyncTime
                inclusiveThruTime = new Timestamp(splitThruLong)
            ]]></script>
        </actions>
    </service>

    <service verb="get" noun="EntitySyncIncludeList">
        <in-parameters>
            <parameter name="entitySyncId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="entityIncludeList" type="List">
                <parameter name="entryMap" type="Map">
                    <parameter name="entityName"/>
                    <parameter name="includeFilterList" type="List"/><!-- List of Maps to be ORed together -->
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <entity-find entity-name="moqui.entity.sync.EntitySyncArtifactDetail" list="esadList">
                <econdition field-name="artifactTypeEnumId" value="AT_ENTITY"/>
                <econdition field-name="entitySyncId"/></entity-find>

            <!-- Maps with entity name as key, value as List or filter Maps (or empty List for no filter) -->
            <set field="includeMap" from="new HashMap()"/>
            <set field="excludeMap" from="new HashMap()"/>
            <set field="alwaysMap" from="new HashMap()"/>
            <set field="withDependentsSet" from="new HashSet()"/>
            <!-- get this once, iterate as needed for nameIsPattern -->
            <set field="allEntitySet" from="ec.entity.getAllEntityNames()"/>
            <iterate list="esadList" entry="esad">
                <set field="nameSet" from="new HashSet()"/>
                <if condition="esad.nameIsPattern == 'Y'">
                    <iterate list="allEntitySet" entry="entityName"><if condition="entityName.matches(esad.artifactName)">
                        <script>nameSet.add(curName)</script></if></iterate>
                    <else><script>nameSet.add(esad.artifactName)</script></else>
                </if>

                <iterate list="nameSet" entry="entityName">
                    <!-- add to Map based on applEnumId of EsaaInclude, EsaaExclude, EsaaAlways -->
                    <set field="curMap" from="esad.applEnumId == 'EsaaExclude' ? excludeMap : (esad.applEnumId == 'EsaaAlways' ? alwaysMap : includeMap)"/>
                    <set field="curMapList" from="curMap.get(entityName) ?: []"/>
                    <if condition="esad.filterMap">
                        <script>curMapList.add(ec.resource.evaluateContextField(esad.filterMap, null))</script></if>
                    <script>curMap.put(entiyName, curMapList)</script>
                    <script>if (esad.dependents == 'Y') withDependentsSet.add(entityName)</script>
                </iterate>
            </iterate>

            <!-- remove excludeMap entries from includeMap -->
            <iterate list="excludeMap" entry="curMapList" key="entityName">
                <script>includeMap.remove(entityName)</script></iterate>
            <!-- now add always entries to the includeMap and use it to create the entityIncludeList -->
            <iterate list="alwaysMap" entry="curMapList" key="entityName">
                <script>
                    if (includeMap.containsKey(entityName)) {
                        List incMapList = includeMap.get(entityName)
                        incMapList.addAll(curMapList)
                    } else {
                        includeMap.put(entityName, curMapList)
                    }
                </script>
            </iterate>


            <set field="entityIncludeList" from="[]"/>
            <iterate list="includeMap" entry="incMapList" key="entityName">
                <script>entityIncludeList.add([entityName:entityName, includeFilterList:incMapList,
                                               dependents:(withDependentsSet.contains(entityName) ? 'Y' : 'N')])</script>
            </iterate>
        </actions>
    </service>
</services>
