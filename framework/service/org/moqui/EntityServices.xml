<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.2.xsd">

    <service verb="receive" noun="DataFeed" type="interface">
        <description>Services named in the DataFeed.feedReceiveServiceName field should implement this interface.</description>
        <in-parameters>
            <parameter name="dataFeedId" type="String" required="true"/>
            <parameter name="feedStamp" type="Timestamp" required="true"/>
            <parameter name="documentList" type="List" required="true">
                <parameter name="document" type="Map">
                    <parameter name="_id" required="true"><description>The combined PK field values of the primary
                        entity in the DataDocument. If tehre is more than one PK field the values are separated with a
                        double-colon ("::").</description></parameter>
                    <parameter name="_type" required="true"><description>The DataDocument.dataDocumentId that defines
                        the document structure, etc.</description></parameter>
                    <parameter name="_index"><description>From DataDocument.indexName, if specified.</description></parameter>
                    <parameter name="_timestamp"><description>Document timestamp in the format yyyy-MM-dd'T'HH:mm:ss</description></parameter>
                </parameter>
            </parameter>
        </in-parameters>
    </service>

    <service verb="add" noun="ManualDocumentData" type="interface">
        <description>Services named in the DataDocument.manualDataServiceName field should implement this interface.</description>
        <in-parameters>
            <parameter name="dataDocumentId" type="String" required="true"/>
            <parameter name="document" type="Map"><description>For details see document parameter in receive#DataFeed.</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="document" type="Map"><description>For details see document parameter in receive#DataFeed.</description></parameter>
        </out-parameters>
    </service>

    <service verb="index" noun="DataDocuments" authenticate="false">
        <description>Indexes documents passed using ElasticSearch. The DataDocument must have an indexName.</description>
        <implements service="org.moqui.EntityServices.receive#DataFeed"/>
        <actions>
            <script>
                // org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger("index_DataDocument")
                for (Map document in documentList) {
                    ec.elasticSearchClient
                            .prepareIndex((String) document._index, (String) document._type, (String) document._id)
                            .setSource(document).execute().actionGet()
                    // logger.warn("============ indexed [${document._index}, ${document._type}, ${document._id}]")
                }
            </script>
        </actions>
    </service>

    <service verb="index" noun="DataFeedDocuments" authenticate="false">
        <in-parameters>
            <parameter name="dataFeedId" required="true"/>
            <parameter name="fromUpdateStamp" type="Timestamp"/>
            <parameter name="thruUpdateStamp" type="Timestamp"/>
        </in-parameters>
        <actions>
            <log level="warn" message="============= indexDataFeedDocuments fromUpdateStamp=[${fromUpdateStamp}]"/>
            <script>documentList = ec.entity.getEntityDataFeed().getFeedDocuments(dataFeedId, fromUpdateStamp, thruUpdatedStamp)</script>
            <set field="feedStamp" from="thruUpdateStamp ?: ec.user.nowTimestamp"/>
            <service-call name="org.moqui.EntityServices.index#DataDocuments" in-map="context"/>
        </actions>
    </service>

    <service verb="search" noun="DataDocuments">
        <description>
            The queryString format is the ElasticSearch supported one, based on the Lucene query strings which are
            partly documented here:

            http://lucene.apache.org/core/4_2_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html
        </description>
        <in-parameters>
            <parameter name="indexName" required="true"/>
            <parameter name="queryString" required="true"/>
            <parameter name="pageIndex" type="Integer" default-value="0"/>
            <parameter name="pageSize" type="Integer" default-value="20"/>
            <parameter name="flattenDocument" type="Boolean" default-value="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="documentList" type="List"><description>List of documents, each document is a Map with
                nested Maps and Lists of Maps.</description></parameter>
            <parameter name="documentListCount" type="Integer"><description>The total count of hits, not just the
                limited number returned.</description></parameter>
            <parameter name="documentListPageIndex" type="Integer"/>
            <parameter name="documentListPageSize" type="Integer"/>
            <parameter name="documentListPageMaxIndex" type="Integer"/>
            <parameter name="documentListPageRangeLow" type="Integer"/>
            <parameter name="documentListPageRangeHigh" type="Integer"/>
        </out-parameters>
        <actions>
            <set field="fromOffset" from="pageIndex * pageSize"/>
            <set field="sizeLimit" from="pageSize"/>
            <script>
                /* useful docs for query API:
                       http://www.elasticsearch.org/guide/reference/api/search/uri-request/
                 */

                import org.elasticsearch.action.get.MultiGetItemResponse
                import org.elasticsearch.action.get.MultiGetRequestBuilder
                import org.elasticsearch.index.query.QueryBuilders
                import org.elasticsearch.search.SearchHit
                import org.elasticsearch.search.SearchHits
                org.moqui.context.ExecutionContext ec = context.ec

                documentList = []

                // get the search hits
                SearchHits hits = ec.elasticSearchClient.prepareSearch().setIndices(indexName)
                        .setQuery(QueryBuilders.queryString(queryString)).setFrom(fromOffset).setSize(sizeLimit).execute().actionGet().getHits()
                if (hits.getTotalHits() > 0) {
                    MultiGetRequestBuilder mgrb = ec.elasticSearchClient.prepareMultiGet()
                    for (SearchHit hit in hits) mgrb.add(hit.getIndex(), hit.getType(), hit.getId())
                    Iterator mgirIt = mgrb.execute().actionGet().iterator()
                    while(mgirIt.hasNext()) {
                        MultiGetItemResponse mgir = mgirIt.next()
                        Map document = mgir.getResponse().getSourceAsMap()
                        documentList.add(flattenDocument ? StupidUtilities.flattenNestedMap(document) : document)
                    }
                }

                // get the total search count
                documentListCount = ec.elasticSearchClient.prepareCount(indexName).setQuery(QueryBuilders.queryString(queryString)).execute().actionGet().getCount()

                // calculate the pagination values
                documentListPageIndex = pageIndex
                documentListPageSize = pageSize
                documentListPageMaxIndex = (int)(documentListCount / documentListPageSize)
                documentListPageRangeLow = documentListPageIndex * documentListPageSize + 1
                documentListPageRangeHigh = (documentListPageIndex * documentListPageSize) + documentListPageSize
                if (documentListPageRangeHigh > documentListCount) documentListPageRangeHigh = documentListCount
            </script>
        </actions>
    </service>
</services>
