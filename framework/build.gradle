apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'war'

sourceCompatibility = 1.6
version = '1.0-beta3'
archivesBaseName = 'moqui'

sourceSets {
    start
    api
}

// maybe in the future: repositories { mavenCentral() }
repositories {
    flatDir name: 'localLib', dirs: 'lib'
    flatDir name: 'localLibFop', dirs: 'lib/fop'
    localLib { addArtifactPattern(file('lib').absolutePath + '/[name]-[version].jar') }
    localLibFop { addArtifactPattern(file('lib/fop').absolutePath + '/[name]-[version].jar') }
}

dependencies {
    compile name: 'antisamy', version: '1.4'

    compile name: 'atomikos-transactions', version: '3.7.0'
    compile name: 'atomikos-transactions-api', version: '3.7.0'
    compile name: 'atomikos-transactions-jdbc', version: '3.7.0'
    compile name: 'atomikos-transactions-jms', version: '3.7.0'
    compile name: 'atomikos-transactions-jta', version: '3.7.0'
    compile name: 'atomikos-util', version: '3.7.0'

    compile name: 'commons-codec', version: '1.4'
    compile name: 'commons-collections', version: '3.2.1'
    compile name: 'commons-email', version: '1.2'
    compile name: 'commons-fileupload', version: '1.2.2'
    compile name: 'commons-httpclient', version: '4.1'
    compile name: 'commons-httpcore', version: '4.1'
    compile name: 'commons-io', version: '2.0.1'
    compile name: 'commons-validator', version: '1.3.1'

    compile name: 'derby', version: '10.8.1.2'
    compile name: 'ehcache-core', version: '2.4.3'
    compile name: 'esapi', version: '2.0GA'
    compile name: 'freemarker', version: '2.3.18'

    compile name: 'geronimo-j2ee-connector_1.5_spec', version: ''
    compile name: 'geronimo-jms_1.1_spec', version: '1.0'
    compile name: 'geronimo-jta_1.1_spec', version: '1.1.1'

    compile name: 'groovy-all', version: '1.8.0'

    compile name: 'jackrabbit-api', version: '2.2.2'
    compile name: 'jackrabbit-jcr-commons', version: '2.2.2'

    compile name: 'jakarta-oro', version: '2.0.8'
    compile name: 'jcr', version: '2.0'

    compile name: 'jsonrpc2-base', version: '1.20'
    compile name: 'jsonrpc2-client', version: '1.4'
    compile name: 'jsonrpc2-server', version: '1.4.1'

    compile name: 'jsr173_1.0_api', version: ''
    compile name: 'liquibase', version: '2.0.1'
    compile name: 'mail', version: ''
    compile name: 'org.eclipse.mylyn.wikitext.core_1.4.0.I20101212-2200-e3x', version: ''
    compile name: 'org.eclipse.mylyn.wikitext.confluence.core_1.4.0.I20101212-2200-e3x', version: ''

    compile name: 'quartz-all', version: '2.0.2'

    compile name: 'redstone-xmlrpc', version: '1.1.1'
    compile name: 'redstone-xmlrpc-client', version: '1.1.1'

    compile name: 'shiro-core', version: '1.1.0'
    compile name: 'shiro-web', version: '1.1.0'

    compile name: 'slf4j-api', version: '1.6.0'

    // winstone is in providedCompile so that it won't be included in the war file WEB-INF/lib
    providedCompile name: 'winstone', version: '0.9.10'

    compile module(name: 'fop', version: '1.0') {
        dependencies module(name: 'avalon-framework', version: '4.2.0'), module(name: 'xmlgraphics-commons', version: '1.4')
    }

    // groovy dependencies (just the library to compile with?)
    groovy name: 'groovy-all', version: '1.8.0'
    groovy name: 'antlr', version: '2.7.7'
    groovy name: 'asm', version: '3.2'

    // runtime dependencies

    runtime name: 'commons-beanutils', version: '1.8.3'
    runtime name: 'commons-cli', version: '1.2'
    runtime name: 'commons-logging', version: '1.1.1'

    runtime name: 'log4j', version: '1.2.15'
    runtime name: 'shiro-ehcache', version: '1.1.0'
    runtime name: 'shiro-quartz', version: '1.1.0'
    runtime name: 'slf4j-log4j12', version: '1.6.0'
}

// an example for reference: runtimeClasspath = sourceSets.main.classes + fileTree(dir: './libs', includes: ['**/log4j.jar'])

// setup task dependencies to make sure the start and api sourceSets always get run
compileJava.dependsOn startClasses
compileJava.dependsOn apiClasses
// add the classes directory for the api SourceSet to the main compile classpath so that dependent classes are available
sourceSets.main.compileClasspath += project.files(project.sourceSets.api.classesDir)

jar {
    // this is necessary otherwise jar won't build when war plugin is applied
    enabled = true
    appendix = 'framework'
    manifest { attributes 'Implementation-Title': 'Moqui Framework', 'Implementation-Version': version }
    from sourceSets.api.classes
    from sourceSets.main.classes
    // get all of the "resources" that are in component-standard directories instead of src/main/resources
    from fileTree(dir: '.', includes: ['data/*', 'entity/*', 'screen/*', 'service/*', 'template/*', 'xsd/*'])
}

war {
    // TODO: how to get it to include the built war file instead of including classes/etc directly? or add a classpath fileTree for those resources... again...
    // TODO: missing extra resource dirs, api classes

    // put the war file in the parent directory, ie the moqui dir instead of the framework dir
    destinationDir = file('..')
    // add MoquiInit.properties to the WEB-INF/classes dir for the deployed war mode of operation
    // TODO: get this to the classes dir, is in the lib dir somehow
    classpath fileTree(dir: '..', includes: ['MoquiInit.properties'])
    classpath file('build/libs/*.jar')
    // put start classes and winstone in the root of the war file for the executable war/jar mode of operation
    from sourceSets.start.classes
    from file('./lib/winstone-0.9.10.jar')
    // setup the manifest for the executable war/jar mode
    manifest { attributes 'Implementation-Title': 'Moqui Start', 'Implementation-Vendor': 'Moqui Framework',
            'Implementation-Version': version, 'Main-Class': 'MoquiStart' }
}
