<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.0.xsd">

    <service verb="increment" noun="UserAccountFailedLogins" authenticate="false">
        <in-parameters><parameter name="userId" type="String" required="true"/></in-parameters>
        <actions>
            <entity-find-one entity-name="UserAccount" value-field="userAccount"/>
            <set field="userAccount.successiveFailedLogins" from="userAccount.successiveFailedLogins + 1"/>
            <!-- if successiveFailedLogins is greater than max in conf then disable account -->
            <compare field="userAccount.successiveFailedLogins" operator="greater"
                     to-field="ec.ecfi.confXmlRoot.'user-facade'[0].login[0].'@max-failures' ?: 3" type="Integer">
                <set field="userAccount.disabled" value="Y"/>
                <set field="userAccount.disabledDateTime" from="ec.user.nowTimestamp"/>
            </compare>
            <entity-update value-field="userAccount"/>
        </actions>
    </service>

    <service verb="update" noun="Password">
        <description>Set a user's password. The userId must match the current user and the oldPassword must match the
            user's currentPassword or special permission is required.</description>
        <in-parameters>
            <parameter name="userId" required="false"><description>Defaults to the current userId in the ExecutionContext.</description></parameter>
            <parameter name="username" required="false"><description>May be used instead of userId to identify user.</description></parameter>
            <parameter name="oldPassword" required="true"><description>Ignored if user has password admin permissions.</description></parameter>
            <parameter name="newPassword" required="true"/>
        </in-parameters>
        <actions>
            <!-- TODO get perm from ? -->
            <set field="hasPwAdminPermission" value="false"/>

            <if condition="userId">
                <then>
                    <entity-find-one entity-name="UserAccount" value-field="userAccount"/>
                </then>
                <else-if condition="username">
                    <entity-find-one entity-name="UserAccount" value-field="userAccount">
                        <field-map field-name="username"/>
                    </entity-find-one>
                </else-if>
            </if>
            <set field="userId" from="userAccount.userId"/>

            <!-- compare the passwords, encrypted -->
            <if condition="!hasPwAdminPermission">
                <if condition="userId != ec.user.userId">
                    <return message="Cannot update the password of another user without password admin permission" error="true"/>
                </if>
                <if condition="!oldPassword">
                    <return message="Please enter current password" error="true"/>
                </if>

                <script>
                    String oldPasswordFullHash = org.moqui.impl.StupidUtilities.getHashDigest(oldPassword,
                            org.moqui.impl.StupidUtilities.getHashSaltFromFull((String) userAccount.currentPassword),
                            org.moqui.impl.StupidUtilities.getHashTypeFromFull((String) userAccount.currentPassword))
                    String oldPasswordHashOnly = org.moqui.impl.StupidUtilities.getHashHashFromFull(oldPasswordFullHash)
                    String currentPasswordHashOnly = org.moqui.impl.StupidUtilities.getHashHashFromFull(userAccount.currentPassword)
                </script>
                <if condition="oldPasswordHashOnly != currentPasswordHashOnly">
                    <return message="Current passwords did not match" error="true"/>
                </if>
            </if>

            <!-- check a bunch of stuff about the new password -->
            <set field="passwordNode" from="ec.ecfi.confXmlRoot.'user-facade'[0].'password'[0]"/>

            <set field="minLength" from="passwordNode.'@min-length'" default-value="6" type="Integer"/>
            <if condition="newPassword.length() &lt; minLength">
                <message error="true">Password shorter than ${minLength} characters</message>
            </if>

            <set field="minDigits" from="passwordNode.'@min-digits'" default-value="1" type="Integer"/>
            <if condition="org.moqui.impl.StupidUtilities.countChars(newPassword,true,false,false) >= minDigits">
                <message error="true">Password needs ${minDigits} digits</message>
            </if>

            <set field="minOthers" from="passwordNode.'@min-others'" default-value="1" type="Integer"/>
            <if condition="org.moqui.impl.StupidUtilities.countChars(newPassword,false,false,true) >= minOthers">
                <message error="true">Password needs ${minOthers} other characters (not letter or digit)</message>
            </if>

            <!-- if password is in the history don't allow it -->
            <set field="historyLimit" from="passwordNode.'@history-limit'" default-value="5" type="Integer"/>
            <entity-find entity-name="UserPasswordHistory" list="duplicateUserPasswordHistoryList">
                <econdition field-name="userId" from="userId"/>
                <econdition field-name="password" from="newPassword"/>
            </entity-find>
            <if condition="duplicateUserPasswordHistoryList">
                <message error="true">Password was used in last ${historyLimit} passwords</message>
            </if>

            <check-errors/>
            <!-- from here on the newPassword is considered okay -->

            <!-- save history, then while more in history than password.@history-limit default 5 then remove oldest -->
            <service-call name="create#UserPasswordHistory">
                <field-map field-name="userId"/>
                <field-map field-name="password" from="newPassword"/>
            </service-call>
            <entity-find entity-name="UserPasswordHistory" list="existingUserPasswordHistoryList">
                <econdition field-name="userId" from="userId"/>
                <order-by field-name="fromDate"/>
            </entity-find>
            <while condition="existingUserPasswordHistoryList.size() &gt; historyLimit">
                <entity-delete value-field="existingUserPasswordHistoryList.remove(0)"/>
            </while>

            <!-- encrypt password (using password.@encrypt-hash-type default SHA) and save -->
            <set field="hashType" from="passwordNode.'@encrypt-hash-type'" default-value="SHA"/>
            <service-call name="update#UserAccount">
                <field-map field-name="userId"/>
                <field-map field-name="currentPassword"
                           from="org.moqui.impl.StupidUtilities.getHashDigest(newPassword, null, hashType)"/>
                <field-map field-name="passwordSetDate" from="ec.user.nowTimestamp"/>
            </service-call>
        </actions>
    </service>

    <service verb="reset" noun="Password" type="inline" authenticate="false">
        <in-parameters>
            <parameter name="username" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="UserAccount" value-field="userAccount">
                <field-map field-name="username"/>
            </entity-find-one>
            <if condition="!userAccount">
                <return message="Could not find user account with username [${username}]" error="true"/>
            </if>
            <if condition="!userAccount.emailAddress">
                <return message="User account with username [${username}] does not have an email address" error="true"/>
            </if>

            <!-- reset the password to a random value -->
            <set field="newPassword" from="org.moqui.impl.StupidUtilities.getRandomString(12)"/>

            <set field="passwordNode" from="ec.ecfi.confXmlRoot.'user-facade'[0].'password'[0]"/>
            <set field="hashType" from="passwordNode.'@encrypt-hash-type'" default-value="SHA"/>
            <service-call name="update#UserAccount">
                <field-map field-name="userId" from="userAccount.userId"/>
                <field-map field-name="currentPassword"
                           from="org.moqui.impl.StupidUtilities.getHashDigest(newPassword, null, hashType)"/>
                <field-map field-name="passwordSetDate" from="ec.user.nowTimestamp"/>
                <field-map field-name="requirePasswordChange"
                           from="(passwordNode.'@email-require-change' == 'false') ? 'N' : 'Y'"/>
            </service-call>

            <!-- send an email with the new password -->
            <set field="bodyParameters.userAccount" from="userAccount"/>
            <set field="bodyParameters.newPassword" from="newPassword"/>
            <service-call name="org.moqui.impl.EmailServices.sendEmailTemplate">
                <field-map field-name="emailTemplateId" value="PASSWORD_RESET"/>
                <field-map field-name="toAddresses" from="userAccount.emailAddress"/>
                <field-map field-name="bodyParameters"/>
            </service-call>
            <message>Password is reset and email sent to: ${userAccount.emailAddress}</message>
        </actions>
    </service>
</services>
